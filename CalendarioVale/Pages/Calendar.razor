@page "/calendar"
@attribute [Authorize]
@inject IDailyStatusService DailyStatusService
@inject DialogService DialogService

<PageTitle>Presenze Mensili</PageTitle>

<RadzenScheduler @ref=@scheduler LoadData="@OnLoadData" SlotRender=@OnSlotRender style="height: 768px;" TItem="DailyStatus" Data=@appointment
                 TextProperty="Note" StartProperty="Date" EndProperty="Date" SelectedIndex="2" SlotSelect=@OnSlotSelect AppointmentSelect=@OnDailyStatusSelect>
    <RadzenDayView />
    <RadzenWeekView />
    <RadzenMonthView />
    <RadzenYearView />
</RadzenScheduler>

@code {
    RadzenScheduler<DailyStatus> scheduler;
    IList<DailyStatus> appointment;

    void OnSlotRender(SchedulerSlotRenderEventArgs args)
    {
        // Highlight today in month view
        if (args.View.Text == "Month" && args.Start.Date == DateTime.Today)
        {
            args.Attributes["style"] = "background: rgba(255,220,40,.2);";
        }
    }

    async Task OnLoadData(SchedulerLoadDataEventArgs args)
    {
        // Get the appointments for between the Start and End
        appointment = await DailyStatusService.GetBetweenDate(args.Start, args.End);
    }

    async Task OnSlotSelect(SchedulerSlotSelectEventArgs args)
    {

        if (args.View.Text != "Year")
        {
            var data = await DialogService.OpenAsync<AddDailyStatusPage>("Aggiunta Data",
                new Dictionary<string, object> { { "Date", args.Start } });

            if (data != null)
            {
                appointment.Add(data);
                await DailyStatusService.Save(data);
                // Either call the Reload method or reassign the Data property of the Scheduler
                await scheduler.Reload();
            }
        }
    }

    async Task OnDailyStatusSelect(SchedulerAppointmentSelectEventArgs<DailyStatus> args)
    {

        var data = await DialogService.OpenAsync<EditDailyStatusPage>("Modifica Data", new Dictionary<string, object> { { "Appointment", args.Data } });
        if (data != null)
        {
            await DailyStatusService.Save(data);
            // Either call the Reload method or reassign the Data property of the Scheduler
            await scheduler.Reload();
        }
    }
}