@page "/DisplayBiometrics"
@attribute [Authorize]
@inject IDailyStatusService DailyStatusService

<RadzenTemplateForm TItem="List<Biometrics>" Data="@model">
    <div class="container">
        <div class="row">
            <div class="col-md-2">
                <RadzenLabel Text="Tipo Di Dato" />
            </div>
            <div class="col">
                <RadzenDropDown @bind-Value=@type Data="@(Enum.GetValues(typeof(BiometricsType)).Cast<Enum>())"
                    Change="@OnChange" Style="width: 100%; max-width: 400px;" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-2">
                <RadzenLabel Text="Data Inizio" />
            </div>
            <div class="col">
                <RadzenDatePicker ShowTime="true" @bind-Value="@startDate" Change="@OnChange" Name="startDate"
                    DateFormat="dd/MM/yyyy HH:mm" />
            </div>
            <div class="col-md-2">
                <RadzenLabel Text="Data Fine" />
            </div>
            <div class="col">
                <RadzenDatePicker ShowTime="true" @bind-Value="@endDate" Change="@OnChange" Name="endDate"
                    DateFormat="dd/MM/yyyy HH:mm" />
            </div>
        </div>
        <div class="row">
            <div class="col-sm-12 my-5">
                <RadzenChart>
                    <RadzenLineSeries Smooth="false" Data="@model" CategoryProperty="DateReading"
                        LineType="LineType.Dashed" ValueProperty="Value">
                        <RadzenMarkers MarkerType="MarkerType.Square" />
                        <RadzenSeriesDataLabels Visible="false" />
                    </RadzenLineSeries>
                </RadzenChart>
            </div>
        </div>
    </div>
</RadzenTemplateForm>
@code {
    public BiometricsType type { get; set; }
    List<Biometrics> model = new List<Biometrics>();
    public DateTime startDate { get; set; }
    public DateTime endDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        startDate = DateTime.Today.AddDays(-1);
        endDate = DateTime.Today.AddHours(23).AddMinutes(59);
        model = await DailyStatusService.GetBiometricsBetweenDate(startDate, endDate, type);
    }
    async Task OnChange(DateTime? value)
    {
        model = await DailyStatusService.GetBiometricsBetweenDate(startDate, endDate, type);
    }
    async Task OnChange(object value)
    {
        model = await DailyStatusService.GetBiometricsBetweenDate(startDate, endDate, type);
    }
}